style = cell_borders(
sides = "top",
color = "gray90",
weight = px(1)
),
locations = list(
cells_stub(rows = 3),
cells_body(rows = 3))
) |>
tab_style(
style = cell_borders(
sides = "bottom",
color = "gray80",
weight = px(3)
),
locations = cells_row_groups(groups = "Male")
) |>
tab_style(
style = cell_borders(
sides = "top",
color = "gray90",
weight = px(1)
),
locations = list(
cells_stub(rows = 5),
cells_body(rows = 5))
) |>
tab_style(
style = cell_borders(
sides = "top",
color = "gray90",
weight = px(1)
),
locations = list(
cells_stub(rows = 6),
cells_body(rows = 6))
) |>
tab_style(
style = cell_borders(
sides = "top",
color = "gray80",
weight = px(3)
),
locations = cells_source_notes()
) |>
print()
gtsave(g, "/Users/edisonkung/Desktop/my_gt.png")
library(pacman)
p_load(gt, palmerpenguins)
penguins2 <- penguins |>
filter(sex %in% c("male", "female")) |>
group_by(sex, species) |>
summarise(
`Body Mass (g)` = round(mean(body_mass_g, na.rm = TRUE)),
`Flipper Length (mm)` = round(mean(flipper_length_mm, na.rm = TRUE)),
`Bill Length (mm)` = round(mean(bill_length_mm, na.rm = TRUE), 2),
`Bill Depth (mm)` = round(mean(bill_depth_mm, na.rm = TRUE), 2),
.groups = "drop"
) |>
mutate(sex = ifelse(sex == "female", "Female", "Male")) |>
mutate(species = factor(species, levels = c("Adelie", "Chinstrap", "Gentoo")))
penguins2 |>
arrange(sex, species) |>
gt(groupname_col = "sex", rowname_col = "species") |>
tab_header(
title = md("**Palmer penguin allometry by species and sex**")
) |>
tab_style(
style = cell_text(align = "left"),
locations = cells_title(groups = "title")
) |>
cols_label(
`Body Mass (g)` = md("BODY MASS (G)"),
`Flipper Length (mm)` = md("FLIPPER LENGTH (MM)"),
`Bill Length (mm)` = md("BILL LENGTH (MM)"),
`Bill Depth (mm)` = md("BILL DEPTH (MM)")
) |>
tab_source_note(
source_note = md("Note: Data were collected at Palmer Archipelago, Antarctica 2007 - 2009.")
) |>
opt_table_lines(extent = "none") |>
cols_align(align = "center", columns = everything()) |>
tab_style(
style = cell_borders(
sides = "top",
color = "black",
weight = px(3)
),
locations = cells_row_groups(groups = "Female")
) |>
tab_style(
style = cell_borders(
sides = "bottom",
color = "gray80",
weight = px(3)
),
locations = cells_row_groups(groups = "Female")
) |>
tab_style(
style = cell_borders(
sides = "top",
color = "gray90",
weight = px(1)
),
locations = list(
cells_stub(rows = 2),
cells_body(rows = 2))
) |>
tab_style(
style = cell_borders(
sides = "top",
color = "gray90",
weight = px(1)
),
locations = list(
cells_stub(rows = 3),
cells_body(rows = 3))
) |>
tab_style(
style = cell_borders(
sides = "bottom",
color = "gray80",
weight = px(3)
),
locations = cells_row_groups(groups = "Male")
) |>
tab_style(
style = cell_borders(
sides = "top",
color = "gray90",
weight = px(1)
),
locations = list(
cells_stub(rows = 5),
cells_body(rows = 5))
) |>
tab_style(
style = cell_borders(
sides = "top",
color = "gray90",
weight = px(1)
),
locations = list(
cells_stub(rows = 6),
cells_body(rows = 6))
) |>
tab_style(
style = cell_borders(
sides = "top",
color = "gray80",
weight = px(3)
),
locations = cells_source_notes()
)
p_load(shiny)
library(pacman)
p_load(shiny)
library(pacman)
p_load(shiny, griffendata)
library(pacman)
print(oecd)
library(pacman)
p_load(shiny, griffendata, tidyverse)
print(oecd)
print(oecd)
library(pacman)
p_load(shiny, griffendata, tidyverse)
print(oecd)
class(oecd)
getAnywhere(print.data.frame)
class(mtcars)
mtcars2 <- unclass(mtcars)
class(mtcars2)
x <- 3L
class(x) <- "integer2"
print(x)
print.integer2 <- function(x){
cat("This number", x, "is an integer.\n")
}
print.integer2(x)
print.integer2(2)
library(pacman)
p_load(shiny, griffendata, tidyverse, class, devtools)
?Titanic
install_github("andrew-griffen/griffendata")
force = TRUE
install_github("andrew-griffen/griffendata")
print.integer2(2)
getwd()
setwd("/Users/edisonkung/desktop/R for empirical research/My R code")
create_package("growth")
p_load(shiny, griffendata, tidyverse, class, devtools, cd)
cd(1, 2)
cd(1, 2)
library(pacman)
p_load(shiny, griffendata, tidyverse, class, devtools, cd)
cd(1, 2)
p_load(shiny, griffendata, tidyverse, class, devtools, growth)
cd(1, 2)
library(growth)
?cd
library("/Users/edisonkung/desktop/R for empirical research/My R code/growth")
library(pacman)
library(growth)
?cd
install("/Users/edisonkung/desktop/R for empirical research/My R code/growth")
library(growth)
?cd
?cd
?cd
?cd
ui <- fluidPage(
# front end interface
)
server <- function(input, output, session){
# back and logic
}
ui <- fluidPage(
numericInput(
inputId = "N",
lable = "N",
value = 100
),
textOutput("double")
)
ui <- fluidPage(
numericInput(
inputId = "N",
lable = "N",
value = 100
),
textOutput("double")
)
ui <- fluidPage(
numericInput(
inputId = "N",
label = "N",
value = 100
),
textOutput("double")
)
ui
ui
ui
server <- function(input, output, session){
output$double <- renderPrint(2*input$N)
}
server
shinyApp(ui, server)
runApp('lecture 13.R')
library(pacman)
p_load(shiny, griffendata, tidyverse, class, devtools, palmerpenguins, gapminder)
View(gapminder_continent)
View(gapminder_cof)
View(gapminder_cof)
gapminder
ui <- fluidPage(
titlePanel("Gapminder Data"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "continent",
label = "Continent",
choices = c("Asia", "Africa", "Europe", "Americas", "Oceania")
)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session){
data <- reactive(
{
dplyr::filter(gapminder, island == input$continent)
})
output$plot <- renderPlot({
data() |>
ggplot(
aes(log(gdpPercap), lifeExp)
) +
geom_point() +
labs(
title = "Life expectancy vs. log GDP per capita",
x = "log GDP per capita",
y = "Life expectancy"
)
}
)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Gapminder Data"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "continent",
label = "Continent",
choices = c("Asia", "Africa", "Europe", "Americas", "Oceania")
)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session){
data <- reactive(
{
dplyr::filter(gapminder, continent == input$continent)
})
output$plot <- renderPlot({
data() |>
ggplot(
aes(log(gdpPercap), lifeExp)
) +
geom_point() +
labs(
title = "Life expectancy vs. log GDP per capita",
x = "log GDP per capita",
y = "Life expectancy"
)
}
)
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Gapminder Data"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "continent",
label = "Continent",
choices = c("Asia", "Africa", "Europe", "Americas", "Oceania")
)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session){
data <- reactive(
{
dplyr::filter(gapminder, continent == input$continent)
})
output$plot <- renderPlot({
data() |>
ggplot(
aes(log(gdpPercap), lifeExp, color = country)
) +
geom_point() +
labs(
title = "Life expectancy vs. log GDP per capita",
x = "log GDP per capita",
y = "Life expectancy"
)
}
)
}
shinyApp(ui, server)
library(pacman)
p_load(shiny, griffendata, tidyverse, class, devtools, palmerpenguins, gapminder, ggthemes)
p_load(shiny, griffendata, tidyverse, class, devtools, palmerpenguins, gapminder, ggthemes)
ui <- fluidPage(
titlePanel("Gapminder Data"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "continent",
label = "Continent",
choices = c("Asia", "Africa", "Europe", "Americas", "Oceania")
)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session){
data <- reactive(
{
dplyr::filter(gapminder, continent == input$continent)
})
output$plot <- renderPlot({
data() |>
ggplot(
aes(log(gdpPercap), lifeExp, color = country)
) +
geom_point() +
labs(
title = "Life expectancy vs. log GDP per capita",
x = "log GDP per capita",
y = "Life expectancy"
) +
theme_minimal()
}
)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Gapminder Data"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "continent",
label = "Continent",
choices = c("Asia", "Africa", "Europe", "Americas", "Oceania")
)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session){
data <- reactive(
{
dplyr::filter(gapminder, continent == input$continent)
})
output$plot <- renderPlot({
data() |>
ggplot(
aes(log(gdpPercap), lifeExp, color = country)
) +
geom_point() +
labs(
title = "Life expectancy vs. log GDP per capita",
x = "log GDP per capita",
y = "Life expectancy"
) +
theme_tufte()
}
)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Gapminder Data"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "continent",
label = "Continent",
choices = c("Asia", "Africa", "Europe", "Americas", "Oceania")
)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session){
data <- reactive(
{
dplyr::filter(gapminder, continent == input$continent)
})
output$plot <- renderPlot({
data() |>
ggplot(
aes(log(gdpPercap), lifeExp, color = country)
) +
geom_point() +
labs(
title = "Life expectancy vs. log GDP per capita",
x = "log GDP per capita",
y = "Life expectancy"
) +
theme_tufte() +
geom_point(show.legend = FALSE) +
scale_color_manual(values = country_colors)
}
)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Gapminder Data"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "continent",
label = "Continent",
choices = c("Asia", "Africa", "Europe", "Americas", "Oceania")
)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session){
data <- reactive(
{
dplyr::filter(gapminder, continent == input$continent)
})
output$plot <- renderPlot({
data() |>
ggplot(
aes(log(gdpPercap), lifeExp, color = country)
) +
geom_point(show.legend = FALSE) +
labs(
title = "Life expectancy vs. log GDP per capita",
x = "log GDP per capita",
y = "Life expectancy"
) +
theme_tufte() +
scale_color_manual(values = country_colors)
}
)
}
shinyApp(ui, server)
