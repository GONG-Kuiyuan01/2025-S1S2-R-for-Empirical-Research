---
title: "Homework 8"
format: pdf
author: "GONG Kuiyuan"
---
Student ID: 39-246182

Student name: GONG Kuiyuan

Preferred name: Eddie

## Answers:

**Task 1**:
```{r}
library(pacman)
p_load(griffendata, ggplot2, ggthemes,hrbrthemes, png, magick, grid, readxl, dplyr, stringr)

p <- clark |>
  ggplot(
    aes(x = population, y = realwage)
  ) +
    geom_line() +
  labs(
    x = "Population (millions)",
    y = "Real income per person (1860s = 100)"
  ) +
  theme_tufte() + 
  geom_label(
    data = clark[clark$year == 1300 | clark$year == 1450 | clark$year == 1650 | clark$year == 1860, ],
    aes(label = year))

print(p)
```
**Task 2**:
```{r}
setwd("/Users/edisonkung/desktop/R for empirical research/HW")
ggsave("clark.png", p, width = 6, height = 4)
```

**Task 3**: I use two argument `path =` and `pattern =` to show that the file `clark.png` is indeed saved on my system.
```{r}
list.files(path = "/Users/edisonkung/desktop/R for empirical research/HW")
list.files(pattern = "\\.png$")
```

**Task 4**: I used two ways to read the png file. The first one is the `readPNG()` function from the package `png`, and the other one is the `image_read()` function from the package `magick`. In order to show the image in this pdf file, `readPNG` alone is enough but include `grid.raster()` from the package `grid`.

```{r}
img1 <- image_read("clark.png")
img1

img2 <- readPNG("clark.png")
grid.raster(img2)
```

**Task 5**: The slides I made is submitted along with other files.

**Task 6**: First, I think it ensures the consistency, when we save it as a file, the content of the graph will not change until we overwrite it. In this case, we allow to rewite the codes and make some other adjustments for other purposes but it doesn't change the graph. Second, we don't want to create the graph in the quarto document that creates the slides is because it makes us difficult to make adjustments and debugging. Making an independent file for generating and saving the graph is a better approach. Third, doing this is more efficient since we don't have to run all the codes for plots over and over again. We will end up having a clear workflow to follow in the first place.

**Task 7**:

```{r}
classroom1 <- read_xlsx("classroom1.xlsx")
classroom2 <- read_xlsx("classroom2.xlsx")
```

**Task 8**: I couldn't bind these two files since `id` in `classroom1` is not entirely numeric, which also happens to `test` in `classroom2`. On the other hand, the names of variables are also different for `test score` and `test`. I also found the variable name of `test score` is not convenient for future operations.

```{r}
typeof(classroom1$id)
typeof(classroom2$id)
typeof(classroom1$`test score`)
typeof(classroom2$test)
```

**Task 9**: Here, I changed the name of value column into `test_score` to prevent generating missing data afterwards. There will be a lot of missing data otherwise because the values can't be matched together if the names are different but generates two separate columns.

```{r}
classroom1 <- classroom1 |>
  rename(test_score = `test score`) |>
  mutate(
    id = str_replace_all(id, c("six" = "6", "1O" = "10")),
    id = as.numeric(id)
  )

classroom2 <- classroom2 |>
  rename(test_score = test) |>
  mutate(
    test_score = str_remove(test_score, "\\\\"),
    test_score = as.numeric(test_score)
  )

classroom <- bind_rows(classroom1, classroom2)
sum(is.na(classroom))
```

**Task 10**:

```{r}
print(classroom)
```